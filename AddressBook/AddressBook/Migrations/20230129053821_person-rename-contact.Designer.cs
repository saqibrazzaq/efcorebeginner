// <auto-generated />
using System;
using AddressBook.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AddressBook.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230129053821_person-rename-contact")]
    partial class personrenamecontact
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AddressBook.Entities.AddressLabel", b =>
                {
                    b.Property<int>("AddressLabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressLabelId"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AddressLabelId");

                    b.ToTable("AddressLabel");
                });

            modelBuilder.Entity("AddressBook.Entities.ChatLabel", b =>
                {
                    b.Property<int>("ChatLabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatLabelId"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ChatLabelId");

                    b.ToTable("ChatLabel");
                });

            modelBuilder.Entity("AddressBook.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("AddressBook.Entities.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("AddressBook.Entities.ContactAddress", b =>
                {
                    b.Property<int>("ContactAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactAddressId"));

                    b.Property<int?>("AddressLabelId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactAddressId");

                    b.HasIndex("AddressLabelId");

                    b.HasIndex("CityId");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactAddress");
                });

            modelBuilder.Entity("AddressBook.Entities.ContactChat", b =>
                {
                    b.Property<int>("ContactChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactChatId"));

                    b.Property<string>("Chat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChatLabelId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.HasKey("ContactChatId");

                    b.HasIndex("ChatLabelId");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactChat");
                });

            modelBuilder.Entity("AddressBook.Entities.ContactEmail", b =>
                {
                    b.Property<int>("ContactEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactEmailId"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmailLabelId")
                        .HasColumnType("int");

                    b.HasKey("ContactEmailId");

                    b.HasIndex("ContactId");

                    b.HasIndex("EmailLabelId");

                    b.ToTable("ContactEmail");
                });

            modelBuilder.Entity("AddressBook.Entities.ContactLabel", b =>
                {
                    b.Property<int>("ContactLabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactLabelId"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<int?>("LabelId")
                        .HasColumnType("int");

                    b.HasKey("ContactLabelId");

                    b.HasIndex("ContactId");

                    b.HasIndex("LabelId");

                    b.ToTable("ContactLabel");
                });

            modelBuilder.Entity("AddressBook.Entities.ContactPhone", b =>
                {
                    b.Property<int>("ContactPhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactPhoneId"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhoneLabelId")
                        .HasColumnType("int");

                    b.HasKey("ContactPhoneId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CountryId");

                    b.HasIndex("PhoneLabelId");

                    b.ToTable("ContactPhone");
                });

            modelBuilder.Entity("AddressBook.Entities.ContactWebsite", b =>
                {
                    b.Property<int>("ContactWebsiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactWebsiteId"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WebsiteLabelId")
                        .HasColumnType("int");

                    b.HasKey("ContactWebsiteId");

                    b.HasIndex("ContactId");

                    b.HasIndex("WebsiteLabelId");

                    b.ToTable("ContactWebsite");
                });

            modelBuilder.Entity("AddressBook.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Capital")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmojiU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iso3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Native")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumericCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubRegion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tld")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("iso2")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("AddressBook.Entities.EmailLabel", b =>
                {
                    b.Property<int>("EmailLabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailLabelId"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("EmailLabelId");

                    b.ToTable("EmailLabel");
                });

            modelBuilder.Entity("AddressBook.Entities.Label", b =>
                {
                    b.Property<int>("LabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabelId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("LabelId");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("AddressBook.Entities.PhoneLabel", b =>
                {
                    b.Property<int>("PhoneLabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneLabelId"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PhoneLabelId");

                    b.ToTable("PhoneLabel");
                });

            modelBuilder.Entity("AddressBook.Entities.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("AddressBook.Entities.Timezone", b =>
                {
                    b.Property<int>("TimezoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimezoneId"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("GmtOffset")
                        .HasColumnType("int");

                    b.Property<string>("GmtOffsetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimezoneId");

                    b.HasIndex("CountryId");

                    b.ToTable("Timezone");
                });

            modelBuilder.Entity("AddressBook.Entities.Translation", b =>
                {
                    b.Property<int>("TranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TranslationId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TranslationId");

                    b.HasIndex("CountryId");

                    b.ToTable("Translation");
                });

            modelBuilder.Entity("AddressBook.Entities.WebsiteLabel", b =>
                {
                    b.Property<int>("WebsiteLabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WebsiteLabelId"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("WebsiteLabelId");

                    b.ToTable("WebsiteLabel");
                });

            modelBuilder.Entity("AddressBook.Entities.City", b =>
                {
                    b.HasOne("AddressBook.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId");

                    b.Navigation("State");
                });

            modelBuilder.Entity("AddressBook.Entities.ContactAddress", b =>
                {
                    b.HasOne("AddressBook.Entities.AddressLabel", "AddressLabel")
                        .WithMany()
                        .HasForeignKey("AddressLabelId");

                    b.HasOne("AddressBook.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("AddressBook.Entities.Contact", "Contact")
                        .WithMany("ContactAddresses")
                        .HasForeignKey("ContactId");

                    b.Navigation("AddressLabel");

                    b.Navigation("City");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("AddressBook.Entities.ContactChat", b =>
                {
                    b.HasOne("AddressBook.Entities.ChatLabel", "ChatLabel")
                        .WithMany()
                        .HasForeignKey("ChatLabelId");

                    b.HasOne("AddressBook.Entities.Contact", "Contact")
                        .WithMany("ContactChats")
                        .HasForeignKey("ContactId");

                    b.Navigation("ChatLabel");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("AddressBook.Entities.ContactEmail", b =>
                {
                    b.HasOne("AddressBook.Entities.Contact", "Contact")
                        .WithMany("ContactEmails")
                        .HasForeignKey("ContactId");

                    b.HasOne("AddressBook.Entities.EmailLabel", "EmailLabel")
                        .WithMany()
                        .HasForeignKey("EmailLabelId");

                    b.Navigation("Contact");

                    b.Navigation("EmailLabel");
                });

            modelBuilder.Entity("AddressBook.Entities.ContactLabel", b =>
                {
                    b.HasOne("AddressBook.Entities.Contact", "Contact")
                        .WithMany("ContactLabels")
                        .HasForeignKey("ContactId");

                    b.HasOne("AddressBook.Entities.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId");

                    b.Navigation("Contact");

                    b.Navigation("Label");
                });

            modelBuilder.Entity("AddressBook.Entities.ContactPhone", b =>
                {
                    b.HasOne("AddressBook.Entities.Contact", "Contact")
                        .WithMany("ContactPhones")
                        .HasForeignKey("ContactId");

                    b.HasOne("AddressBook.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("AddressBook.Entities.PhoneLabel", "PhoneLabel")
                        .WithMany()
                        .HasForeignKey("PhoneLabelId");

                    b.Navigation("Contact");

                    b.Navigation("Country");

                    b.Navigation("PhoneLabel");
                });

            modelBuilder.Entity("AddressBook.Entities.ContactWebsite", b =>
                {
                    b.HasOne("AddressBook.Entities.Contact", "Contact")
                        .WithMany("ContactWebsites")
                        .HasForeignKey("ContactId");

                    b.HasOne("AddressBook.Entities.WebsiteLabel", "WebsiteLabel")
                        .WithMany()
                        .HasForeignKey("WebsiteLabelId");

                    b.Navigation("Contact");

                    b.Navigation("WebsiteLabel");
                });

            modelBuilder.Entity("AddressBook.Entities.State", b =>
                {
                    b.HasOne("AddressBook.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AddressBook.Entities.Timezone", b =>
                {
                    b.HasOne("AddressBook.Entities.Country", "Country")
                        .WithMany("Timezones")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AddressBook.Entities.Translation", b =>
                {
                    b.HasOne("AddressBook.Entities.Country", "Country")
                        .WithMany("Translations")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AddressBook.Entities.Contact", b =>
                {
                    b.Navigation("ContactAddresses");

                    b.Navigation("ContactChats");

                    b.Navigation("ContactEmails");

                    b.Navigation("ContactLabels");

                    b.Navigation("ContactPhones");

                    b.Navigation("ContactWebsites");
                });

            modelBuilder.Entity("AddressBook.Entities.Country", b =>
                {
                    b.Navigation("States");

                    b.Navigation("Timezones");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("AddressBook.Entities.State", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
